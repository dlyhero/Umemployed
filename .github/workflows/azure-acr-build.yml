name: Build, Push and Deploy to Azure Container Instances

on:
  push:
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: celeryworkerumemployed.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -f Dockerfile.celery -t celeryworkerumemployed.azurecr.io/celery-worker:latest .
        docker push celeryworkerumemployed.azurecr.io/celery-worker:latest

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances
      run: |
        echo "ðŸš€ Deploying Celery Worker to Azure Container Instances..."
        
        # Delete existing container if it exists
        echo "Checking for existing container..."
        if az container show --resource-group UmEmployed_RG --name celery-worker >/dev/null 2>&1; then
          echo "Deleting existing container..."
          az container delete \
            --resource-group UmEmployed_RG \
            --name celery-worker \
            --yes
          echo "âœ… Existing container deleted"
        else
          echo "No existing container found"
        fi
        
        # Create new container with proper configuration
        echo "Creating new Celery worker container..."
        az container create \
          --resource-group UmEmployed_RG \
          --name celery-worker \
          --image celeryworkerumemployed.azurecr.io/celery-worker:latest \
          --registry-login-server celeryworkerumemployed.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --restart-policy Always \
          --cpu 1 \
          --memory 1.5 \
          --command-line "celery -A umemployed worker --loglevel=info --concurrency=2" \
          --environment-variables \
            DJANGO_SETTINGS_MODULE=umemployed.settings \
            AZURE_DB_NAME="${{ secrets.AZURE_DB_NAME }}" \
            AZURE_DB_USER="${{ secrets.AZURE_DB_USER }}" \
            AZURE_DB_PASSWORD="${{ secrets.AZURE_DB_PASSWORD }}" \
            AZURE_DB_HOST="${{ secrets.AZURE_DB_HOST }}" \
            AZURE_DB_PORT="${{ secrets.AZURE_DB_PORT }}" \
            REDIS_URL="${{ secrets.REDIS_URL }}" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            DEBUG=False \
            REDIS_SSL_CERT_REQS=none \
            SOCIAL_AUTH_GOOGLE_OAUTH_KEY="${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH_KEY }}" \
            SOCIAL_AUTH_GOOGLE_OAUTH_SECRET="${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH_SECRET }}"
        
        echo "âœ… Celery worker deployed successfully!"
        
        # Get container status
        echo "ðŸ“Š Container Status:"
        az container show \
          --resource-group UmEmployed_RG \
          --name celery-worker \
          --query "{name:name,state:containers[0].instanceView.currentState.state,image:containers[0].image,restartCount:containers[0].instanceView.restartCount}" \
          --output table
        
        echo "ðŸ“‹ To view logs: az container logs --resource-group UmEmployed_RG --name celery-worker"
