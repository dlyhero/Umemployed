name: Deploy Celery to Azure

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile.celery'
      - 'requirements.txt'
      - 'umemployed/**'
      - 'job/**'
      - 'messaging/**'
      - 'resume/**'
      - 'users/**'
      - '.github/workflows/deploy-celery.yml'
  workflow_dispatch:  # Allow manual triggering

env:
  RESOURCE_GROUP: UmEmployed_RG
  ACR_NAME: celeryworkerumemployed
  CELERY_WORKER_NAME: umemployed-celery-worker
  CELERY_BEAT_NAME: umemployed-celery-beat

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push Celery Worker to ACR
      run: |
        echo "üî® Building and pushing Celery Worker image..."
        az acr build \
          --registry $ACR_NAME \
          --image celery-worker:latest \
          --image celery-worker:${{ github.sha }} \
          --file Dockerfile.celery \
          .

    - name: Build and push Celery Beat to ACR
      run: |
        echo "üî® Building and pushing Celery Beat image..."
        
        # Create temporary Dockerfile for Celery Beat
        cat > Dockerfile.celery-beat << 'EOF'
        FROM python:3.10-slim

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            libpq-dev gcc python3-dev libmagic1 dnsutils \
            && apt-get clean \
            && rm -rf /var/lib/apt/lists/*

        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        RUN pip install celery django-celery-beat

        COPY . .
        ENV REDIS_SSL_CERT_REQS=none
        COPY entrypoint.sh /entrypoint.sh
        RUN chmod +x /entrypoint.sh

        ENTRYPOINT ["/entrypoint.sh"]
        CMD ["celery", "-A", "umemployed", "beat", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
        EOF
        
        az acr build \
          --registry $ACR_NAME \
          --image celery-beat:latest \
          --image celery-beat:${{ github.sha }} \
          --file Dockerfile.celery-beat \
          .

    - name: Get ACR credentials
      id: acr-creds
      run: |
        ACR_SERVER=$(az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP --query "loginServer" --output tsv)
        ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" --output tsv)
        
        echo "acr_server=$ACR_SERVER" >> $GITHUB_OUTPUT
        echo "acr_username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "::add-mask::$ACR_PASSWORD"
        echo "acr_password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

    - name: Deploy Celery Worker Container
      run: |
        echo "üê≥ Deploying Celery Worker..."
        
        # Delete existing container if it exists
        if az container show --resource-group $RESOURCE_GROUP --name $CELERY_WORKER_NAME &> /dev/null; then
          echo "üóëÔ∏è Deleting existing Celery Worker..."
          az container delete \
            --resource-group $RESOURCE_GROUP \
            --name $CELERY_WORKER_NAME \
            --yes
        fi
        
        # Create new container
        az container create \
          --resource-group $RESOURCE_GROUP \
          --name $CELERY_WORKER_NAME \
          --image ${{ steps.acr-creds.outputs.acr_server }}/celery-worker:latest \
          --registry-username ${{ steps.acr-creds.outputs.acr_username }} \
          --registry-password ${{ steps.acr-creds.outputs.acr_password }} \
          --cpu 1 \
          --memory 2 \
          --os-type Linux \
          --restart-policy Always \
          --environment-variables \
            DEBUG=0 \
            DJANGO_ALLOWED_HOSTS="*" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_PORT="${{ secrets.DB_PORT }}" \
            REDIS_URL="${{ secrets.REDIS_URL }}" \
            REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            LLAMA_API_KEY="${{ secrets.LLAMA_API_KEY }}" \
            AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
            AZURE_ACCOUNT_KEY="${{ secrets.AZURE_ACCOUNT_KEY }}" \
            AZURE_CONTAINER="${{ secrets.AZURE_CONTAINER }}" \
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            STRIPE_PUBLISHABLE_KEY="${{ secrets.STRIPE_PUBLISHABLE_KEY }}" \
            AGORA_APP_ID="${{ secrets.AGORA_APP_ID }}" \
            AGORA_APP_CERTIFICATE="${{ secrets.AGORA_APP_CERTIFICATE }}"

    - name: Deploy Celery Beat Container
      run: |
        echo "‚è∞ Deploying Celery Beat..."
        
        # Delete existing container if it exists
        if az container show --resource-group $RESOURCE_GROUP --name $CELERY_BEAT_NAME &> /dev/null; then
          echo "üóëÔ∏è Deleting existing Celery Beat..."
          az container delete \
            --resource-group $RESOURCE_GROUP \
            --name $CELERY_BEAT_NAME \
            --yes
        fi
        
        # Create new container
        az container create \
          --resource-group $RESOURCE_GROUP \
          --name $CELERY_BEAT_NAME \
          --image ${{ steps.acr-creds.outputs.acr_server }}/celery-beat:latest \
          --registry-username ${{ steps.acr-creds.outputs.acr_username }} \
          --registry-password ${{ steps.acr-creds.outputs.acr_password }} \
          --cpu 0.5 \
          --memory 1 \
          --os-type Linux \
          --restart-policy Always \
          --environment-variables \
            DEBUG=0 \
            DJANGO_ALLOWED_HOSTS="*" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_PORT="${{ secrets.DB_PORT }}" \
            REDIS_URL="${{ secrets.REDIS_URL }}" \
            REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            LLAMA_API_KEY="${{ secrets.LLAMA_API_KEY }}" \
            AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
            AZURE_ACCOUNT_KEY="${{ secrets.AZURE_ACCOUNT_KEY }}" \
            AZURE_CONTAINER="${{ secrets.AZURE_CONTAINER }}"

    - name: Verify Deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Wait a bit for containers to start
        sleep 30
        
        echo "üìä Container Status:"
        az container list \
          --resource-group $RESOURCE_GROUP \
          --query "[?contains(name, 'celery')].{Name:name,State:containers[0].instanceView.currentState.state,RestartCount:containers[0].instanceView.restartCount}" \
          --output table
        
        echo "üìã Recent logs - Celery Worker:"
        az container logs \
          --resource-group $RESOURCE_GROUP \
          --name $CELERY_WORKER_NAME \
          --tail 10 || true
        
        echo "üìã Recent logs - Celery Beat:"
        az container logs \
          --resource-group $RESOURCE_GROUP \
          --name $CELERY_BEAT_NAME \
          --tail 10 || true

    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed!"
        echo "üìã Summary:"
        echo "  ‚úÖ Celery Worker: $CELERY_WORKER_NAME"
        echo "  ‚úÖ Celery Beat: $CELERY_BEAT_NAME"
        echo "  ‚úÖ Images tagged with: latest, ${{ github.sha }}"
        echo ""
        echo "üîç Monitor with:"
        echo "  az container logs --resource-group $RESOURCE_GROUP --name $CELERY_WORKER_NAME"
        echo "  az container logs --resource-group $RESOURCE_GROUP --name $CELERY_BEAT_NAME"
