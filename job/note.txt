import json
from .models import Skill, SkillQuestion
from openai import OpenAI
import logging
from django.http import JsonResponse

api_key = ""
client = OpenAI(api_key=api_key)
logger = logging.getLogger(__name__)

def generate_questions_for_skills(job_title, entry_level=None):
    print("Generating questions for job title:", job_title)
    questions = []

    try:
        skills = Skill.objects.filter(categories__name=job_title)  # Query skills based on job title
        print("Skills found for job title", job_title, ":", skills)
        
        for skill in skills:
            print("Processing skill:", skill.name)
            # Generate MCQs for each skill
            mcqs_data = generate_mcqs_for_skill(skill.name)
            print("MCQs data:", mcqs_data)
            
            if mcqs_data:
                print(mcqs_data)
                # Assuming only one question is generated per skill
                mcq_data = mcqs_data
                try:
                    # Validate the data structure
                    if 'question' in mcq_data and 'options' in mcq_data and 'correct_answer' in mcq_data:
                        print("found---------------------")
                        question = mcq_data['question']
                        options = mcq_data['options']
                        correct_answer = mcq_data['correct_answer']
                        
                        print("Question:", question)
                        print("Options:", options)
                        print("Correct answer:", correct_answer)

                        # Create SkillQuestion object and associate it with the Skill
                        skill_question = SkillQuestion.objects.create(
                            question=question,
                            option_a=options.get('A', ''),
                            option_b=options.get('B', ''),
                            option_c=options.get('C', ''),
                            option_d=options.get('D', ''),
                            correct_answer=correct_answer,
                            skill=skill,
                            entry_level=entry_level  # Set the entry level for the question
                        )
                        questions.append(skill_question)
                    else:
                        print("Incomplete MCQ data for skill", skill.name, ":", mcqs_data)
                except Exception as e:
                    print("An error occurred while creating question for skill", skill.name, ":", e)
            else:
                print("No MCQs data found for skill", skill.name)
    except Exception as e:
        print("An error occurred while processing skills for job title", job_title, ":", e)

    return questions


def generate_mcqs_for_skill(skill_name):
    conversation = [
        {
            "role": "user", 
            "content": f"Generate 1 technical multiple-choice question and answers related to the skill: {skill_name}. Each question should be followed by four answer choices (A, B, C, D) and a correct answer indicated. Ensure that the response is provided in JSON format, where the MCQ is represented as an object with the following structure: \n\n{{\n  \"question\": \"\",\n  \"options\": {{\n    \"A\": \"\",\n    \"B\": \"\",\n    \"C\": \"\",\n    \"D\": \"\"\n  }},\n  \"correct_answer\": \"\"\n}}"
        }
    ]

    try:
        # Make a request to the ChatGPT API using the initialized client
        response = client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=conversation
        )

        # Extract the generated MCQs and answers from the chat-based response
        mcqs_and_answers = response.choices[0].message.content

        # Parse the response as JSON
        mcqs_and_answers_list = json.loads(mcqs_and_answers)
        return mcqs_and_answers_list

    except (json.JSONDecodeError, Exception) as e:
        # Handle errors gracefully
        logger.error("An error occurred while generating MCQs for skill %s: %s", skill_name, e)
        return None

def generate_questions_view(request):
    if request.method == 'GET':
        job_title = request.GET.get('job_title')
        entry_level = request.GET.get('entry_level')  # If entry level is passed via query parameter

        try:
            # Call the function to generate questions for skills
            questions = generate_questions_for_skills(job_title, entry_level)

            if questions:
                # Serialize the relevant attributes of SkillQuestion objects to JSON
                serialized_questions = []
                for question in questions:
                    serialized_question = {
                        'question': question.question,
                        'option_a': question.option_a,
                        'option_b': question.option_b,
                        'option_c': question.option_c,
                        'option_d': question.option_d,
                        'correct_answer': question.correct_answer,
                        'skill': question.skill.name,
                        'entry_level': question.entry_level
                    }
                    serialized_questions.append(serialized_question)

                print("Serialized questions:", serialized_questions)  # Print serialized questions
                return JsonResponse({"message": "Questions generated successfully", "questions": serialized_questions})
            else:
                return JsonResponse({"error": "Failed to generate questions"}, status=500)

        except Exception as e:
            # Log the error
            logging.error(f"An error occurred: {e}")
            # Print the error
            print("An error occurred:", e)
            # Return an error response to the client
            return JsonResponse({"error": "An error occurred"}, status=500)

    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

